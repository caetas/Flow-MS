import argparse
import torch

def parse_args():
    argparser = argparse.ArgumentParser()
    argparser.add_argument('--batch_size', type=int, default=256, help='batch size')
    argparser.add_argument('--n_epochs', type=int, default=100, help='number of epochs')
    argparser.add_argument('--lr', type=float, default=1e-3, help='learning rate')
    argparser.add_argument('--n_features', type=int, default = 64, help='number of features')
    argparser.add_argument('--init_channels', type=int, default = 32, help='initial channels')
    argparser.add_argument('--channel_scale_factors', type=int, nargs='+', default = [1, 2, 2], help='channel scale factors')
    argparser.add_argument('--resnet_block_groups', type=int, default = 8, help='resnet block groups')
    argparser.add_argument('--use_convnext', type=bool, default = True, help='use convnext (default: True)')
    argparser.add_argument('--convnext_scale_factor', type=int, default = 2, help='convnext scale factor (default: 2)')
    argparser.add_argument('--sample_and_save_freq', type=int, default=5, help='sample and save frequency')
    argparser.add_argument('--checkpoint', type=str, default=None, help='checkpoint path')
    argparser.add_argument('--n_samples', type=int, default=16, help='number of samples')
    argparser.add_argument('--n_steps', type=int, default=50, help='number of steps')
    argparser.add_argument('--n_classes', type=int, default=2, help='number of classes')
    argparser.add_argument('--dataset', type=str, default='bccd', help='dataset', choices=['bccd', 'brats', 'celeb', 'cityscapes'])
    argparser.add_argument('--size', type=int, default=64, help='size of image')
    argparser.add_argument('--dist', type=float, default=3.0, help='distance between distributions')
    argparser.add_argument('--var', type=float, default=0.25, help='variance of distribution')
    argparser.add_argument('--warmup', type=int, default=10, help='warmup epochs')
    argparser.add_argument('--decay', type=float, default=1e-5, help='decay rate')
    argparser.add_argument('--solver', type=str, default='dopri5', help='solver for ODE', choices=['dopri5', 'rk4', 'dopri8', 'euler', 'bosh3', 'adaptive_heun', 'midpoint', 'explicit_adams', 'implicit_adams'])
    argparser.add_argument('--ode', action='store_true', default=False, help='use ODE solver')
    argparser.add_argument('--clip', action='store_true', default=False, help='clip the gaussians')
    argparser.add_argument('--clip_dist', type=float, default=3.0, help='length of the cube')
    argparser.add_argument('--num_workers', type=int, default=0, help='number of workers')
    argparser.add_argument('--w_seg', type=float, default=0.2, help='weight for the segmentation loss')
    argparser.add_argument('--tolerance', type=float, default=1e-2, help='minimum tolerance for training the gaussians')
    argparser.add_argument('--anchor', action='store_true', default=False, help='anchor the mean of the gaussians during training')
    argparser.add_argument('--num_heads', type=int, default=4, help='number of heads')
    argparser.add_argument('--head_dim', type=int, default=32, help='heads dimension')
    args = argparser.parse_args()
    args.channel_scale_factors = tuple(args.channel_scale_factors)
    return args

def parse_args_SemFM():
    argparser = argparse.ArgumentParser()
    argparser.add_argument('--batch_size', type=int, default=256, help='batch size')
    argparser.add_argument('--n_epochs', type=int, default=100, help='number of epochs')
    argparser.add_argument('--lr', type=float, default=1e-3, help='learning rate')
    argparser.add_argument('--model_channels', type=int, default = 64, help='number of features')
    argparser.add_argument('--num_res_blocks', type=int, default = 2, help='number of residual blocks per downsample')
    argparser.add_argument('--attention_resolutions', type=int, nargs='+', default = [4], help='downsample rates at which attention will take place')
    argparser.add_argument('--dropout', type=float, default = 0.0, help='dropout probability')
    argparser.add_argument('--channel_mult', type=int, nargs='+', default = [1, 2, 2], help='channel multiplier for each level of the UNet')
    argparser.add_argument('--conv_resample', type=bool, default = True, help='use learned convolutions for upsampling and downsampling')
    argparser.add_argument('--dims', type=int, default = 2, help='determines if the signal is 1D, 2D, or 3D')
    argparser.add_argument('--num_heads', type=int, default = 4, help='number of attention heads in each attention layer')
    argparser.add_argument('--num_head_channels', type=int, default = 32, help='use a fixed channel width per attention head')
    argparser.add_argument('--use_scale_shift_norm', type=bool, default = False, help='use a FiLM-like conditioning mechanism')
    argparser.add_argument('--resblock_updown', type=bool, default = False, help='use residual blocks for up/downsampling')
    argparser.add_argument('--use_new_attention_order', type=bool, default = False, help='use a different attention pattern for potentially increased efficiency')
    argparser.add_argument('--sample_and_save_freq', type=int, default=5, help='sample and save frequency')
    argparser.add_argument('--checkpoint', type=str, default=None, help='checkpoint path')
    argparser.add_argument('--n_samples', type=int, default=16, help='number of samples')
    argparser.add_argument('--n_steps', type=int, default=50, help='number of steps')
    argparser.add_argument('--n_classes', type=int, default=2, help='number of classes')
    argparser.add_argument('--dataset', type=str, default='bccd', help='dataset', choices=['bccd', 'brats', 'celeb', 'cityscapes'])
    argparser.add_argument('--size', type=int, default=64, help='size of image')
    argparser.add_argument('--dist', type=float, default=4.0, help='distance between distributions')
    argparser.add_argument('--warmup', type=int, default=10, help='warmup epochs')
    argparser.add_argument('--decay', type=float, default=1e-5, help='decay rate')
    argparser.add_argument('--solver', type=str, default='dopri5', help='solver for ODE', choices=['dopri5', 'rk4', 'dopri8', 'euler', 'bosh3', 'adaptive_heun', 'midpoint', 'explicit_adams', 'implicit_adams'])
    argparser.add_argument('--ode', action='store_true', default=False, help='use ODE solver')
    argparser.add_argument('--num_workers', type=int, default=0, help='number of workers')
    argparser.add_argument('--w_seg', type=float, default=0.2, help='weight for the segmentation loss')
    argparser.add_argument('--tolerance', type=float, default=0.1, help='minimum tolerance for training the gaussians')
    argparser.add_argument('--anchor', action='store_true', default=False, help='anchor the mean of the gaussians during training')
    argparser.add_argument('--dequantize', action='store_true', default=False, help='dequantize the input')
    args = argparser.parse_args()
    args.channel_mult = tuple(args.channel_mult)
    args.attention_resolutions = tuple(args.attention_resolutions)

    return args